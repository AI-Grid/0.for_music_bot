import os

from browserforge.fingerprints import Screen
from camoufox import Camoufox
from playwright.sync_api import expect  # Added expect

os_list = ["windows", "macos", "linux"]
font_list = ["Arial", "Helvetica", "Times New Roman"]
constrains = Screen(max_width=1920, max_height=1080)


with Camoufox(
    os=os_list,
    fonts=font_list,
    screen=constrains,
    humanize=True,
    main_world_eval=True,
    geoip=True,
) as browser:
    page = browser.new_page(locale="en-US")
    page.goto(
        "https://aistudio.google.com/prompts/new_chat",
        wait_until="domcontentloaded",
        timeout=30000,
    )

    page.wait_for_timeout(2000)
    page.wait_for_load_state("load")

    email_input = page.locator('input[type="email"]')
    email_input.wait_for(state="visible", timeout=10000)
    email_input.fill("pbNJ1sznC2Gr@gmail.com")
    page.keyboard.press("Enter")

    password_input = page.locator('input[name="Passwd"]')
    password_input.wait_for(state="visible", timeout=10000)
    password_input.fill("&!8G26tlbsgO")
    page.keyboard.press("Enter")

    page.wait_for_url("https://aistudio.google.com/prompts/new_chat", timeout=20000)

    page.mouse.click(10, 10)

    prompt_textarea_selector = (
        'textarea[aria-label="Type something or tab to choose an example prompt"]'
    )
    page.locator(prompt_textarea_selector).wait_for(state="visible", timeout=30000)
    print("AI Studio page is ready for interaction.")

    script_directory = os.path.dirname(os.path.abspath(__file__))
    audio_file_path_relative_to_script = "../test title.mp3"
    audio_file_path = os.path.join(script_directory, audio_file_path_relative_to_script)
    audio_file_path = os.path.normpath(audio_file_path)

    if not os.path.exists(audio_file_path):
        print(f"ERROR: Audio file not found at resolved path: {audio_file_path}")
        print(
            f"Please ensure the relative path from script '{audio_file_path_relative_to_script}' is correct."
        )
        browser.close()
        exit()

    print(f"Preparing to upload audio file: {audio_file_path}")

    add_button = page.locator(
        'button[aria-label="Insert assets such as images, videos, files, or audio"]'
    )
    add_button.wait_for(state="visible", timeout=10000)
    print("Found 'Add' (plus icon) button.")

    add_button.click()
    print("Clicked 'Add' button. Expecting a menu to open.")

    page.wait_for_timeout(1000)

    try:
        file_input_locator = page.locator('input[type="file"]')

        file_input_locator.wait_for(state="attached", timeout=5000)
        print("Found a generic input[type='file'] element.")
        file_input_locator.set_input_files(audio_file_path)
        print(
            f"Fallback: Successfully set files on generic input[type='file']: {audio_file_path}"
        )
    except Exception as e2:
        print(f"Error in fallback (direct set_input_files) method: {e2}")
        print("File upload failed with all attempted methods.")

    print("Waiting for a few seconds to observe UI changes after upload attempt...")
    acknowledge_bttn = page.locator('span:has-text("Acknowledge")')
    acknowledge_bttn.wait_for(state="visible", timeout=2000)
    if acknowledge_bttn.is_visible():
        print("Acknowledge button is visible, clicking it.")
        acknowledge_bttn.click()

    prompt_textarea = page.locator(
        'textarea[aria-label="Type something or tab to choose an example prompt"]'
    )
    prompt_textarea.wait_for(state="visible", timeout=5000)
    if prompt_textarea.is_visible():
        print("Prompt textarea is visible.")
        prompt_textarea.fill(
            "This is a song generated by AI and we need to check it's quality. The AI has a tendency of making a few common mistakes. Please write out the lyrics that you hear and note what is spoken and what is rapped, and what is sung. If the song is unclear or sounds messy and unmusical, the song needs to be deleted and remade. If it is more than 30% spoken it needs to be deleted and remade. If it cuts off abruptly and doesnt resolve naturally, it needs to be deleted and remade, and if the song feels like it ends, but then it picks back up again, it needs to be deleted and remade. Please write out the lyrics as requested and let me know if any red flags require the song to be deleted and remade. Don't attempt to recognize the lyrics source and infer what they should be, just write what you hear without inference or adjustment. If a word doesn’t make sense, just spell it out phonetically. Add final verdict by ending with 'Final Verdict: [re-roll] or [continue]'."
        )
    else:
        print("Prompt textarea not found or not visible.")

    box = prompt_textarea.bounding_box()
    if box:
        x = box["x"] + box["width"] / 2                           
        y = box["y"] + box["height"] / 2
        page.mouse.click(x, y)
        print(f"Clicked at ({x}, {y}) to focus the textarea.")
    else:
        print("Could not get bounding box for textarea; fallback to (10, 10).")
        page.mouse.click(10, 10)

    run_bttn = page.locator('button[aria-label="Run"]')

    print("Waiting for Run button to become enabled...")
    try:
        expect(run_bttn).to_be_enabled(timeout=20000)
        print("Run button is enabled.")
    except Exception as e:
        print(f"Error: Run button did not become enabled within timeout. {e}")
        page.screenshot(path="debug_run_button_not_enabled.png")
        print("Screenshot saved to debug_run_button_not_enabled.png")
        raise

    overlay_selector = "div.cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing"
    overlay = page.locator(overlay_selector)

    print(f"Waiting for potential overlay ('{overlay_selector}') to disappear...")
    try:
        overlay.wait_for(state="hidden", timeout=10000)
        print("Overlay is hidden or was not an issue.")
    except Exception:
        print(
            f"Warning: Overlay ('{overlay_selector}') did not disappear within 10s. Attempting to dismiss with Escape key."
        )
        page.keyboard.press("Escape")
        print("Pressed Escape key as a fallback to dismiss overlay.")
        page.wait_for_timeout(500)

        if overlay.is_visible():
            print(
                f"Warning: Overlay ('{overlay_selector}') still visible after Escape press. Click might fail."
            )
        else:
            print("Overlay seems to have been dismissed by Escape key or disappeared.")

    print("Attempting to click the Run button...")
    try:
        run_bttn.click(timeout=15000)
        print("Run button clicked successfully.")
    except Exception as e:
        print(f"Error: Failed to click Run button. {e}")

        page.screenshot(path="debug_run_button_click_failed.png")
        print("Screenshot saved to debug_run_button_click_failed.png.")
        try:
            with open(
                "debug_page_content_click_failed.html", "w", encoding="utf-8"
            ) as f:
                f.write(page.content())
            print("Page HTML saved to debug_page_content_click_failed.html.")
        except Exception as ex_html:
            print(f"Could not save page HTML: {ex_html}")
        raise

    page.wait_for_timeout(60000)
    ai_response = page.locator("ms-text-chunk.ng-star-inserted").last
    ai_response.wait_for(state="visible", timeout=30000)
    print("AI response is now visible.")
    ai_response_text = ai_response.inner_text()
    print("AI Response Text:")
    print(ai_response_text)

    # if ai_response_text:
    #     if "[re-roll]" in ai_response_text.lower():
    #         print("Final Verdict: re-roll detected in AI response.")
    #     elif "[continue]" in ai_response_text.lower():
    #         print("Final Verdict: continue detected in AI response.")

    try:
        print("Waiting for prompt textarea to be visible for the second prompt...")
        prompt_textarea = page.locator('textarea[aria-label="Start typing a prompt"]')
        prompt_textarea.wait_for(state="visible", timeout=20000)  # Increased timeout
        print("Prompt textarea is visible for the second prompt.")

        prompt_textarea.fill(
            """You are our primary proofreader, and we need to confirm the AI has not made any mistakes with our lyrics while singing. Below, I will give you the intended lyrics for the song, please compare them to the lyrics you transcribed above for inaccuracies.

            Converted song structure verses: {'Intro': {'1': 'In the beginning, God created the heavens and the earth. '}, 'Verse 1': {'2': 'The earth was formless and empty. Darkness was on the surface of the deep and God’s Spirit was hovering over the surface of the waters. ', '3': 'God said, “Let there be light,” and there was light. '}, 'Chorus': {'4': 'God saw the light, and saw that it was good. God divided the light from the darkness. '}, 'Bridge': {'5': 'God called the light “day”, and the darkness he called “night”. There was evening and there was morning, the first day. '}}

            [Intro]:
            In the beginning, God created the heavens and the earth.

            [Verse 1]:
            The earth was formless and empty.
            Darkness was on the surface of the deep and God’s Spirit was hovering over the surface of the waters.
            God said, “Let there be light,” and there was light.

            [Chorus]:
            God saw the light, and saw that it was good.
            God divided the light from the darkness.

            [Bridge]:
            God called the light “day”, and the darkness he called “night”.
            There was evening and there was morning, the first day.

            We are looking for things that don’t match which indicates the song must be deleted and remade. Our goal is to go verse by verse and stay perfectly in order without skipping or adjusting or repeating. If the song has adlibs near the start, this is acceptable. If the song repeats a single sentence or a few words directly after that sentence or phrase has been said, this is an acceptable creative decision. If the song fully completes the lyrics, any repetition that comes after is acceptable as long as the lyrics were completely sung through at least once fully in order. Since some words may not have been recognized by you, if you notice that a word is spelled differently, but with similar phonetics, assume that the word is correct and you just misheard before. Please tell me if the song needs to be deleted and remade, or if it is safe to keep.

            Add final verdict by ending with 'Final Verdict: [re-roll] or [continue]'."""
        )

        run_bttn = page.locator('button[aria-label="Run"]')

        print("Waiting for Run button to become enabled (second run)...")
        try:
            expect(run_bttn).to_be_enabled(timeout=20000)
            print("Run button is enabled (second run).")
        except Exception as e:
            print(
                f"Error: Run button did not become enabled within timeout (second run). {e}"
            )
            page.screenshot(path="debug_run_button_not_enabled_second_run.png")
            print("Screenshot saved to debug_run_button_not_enabled_second_run.png")
            raise

        overlay_selector = "div.cdk-overlay-backdrop.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing"
        overlay = page.locator(overlay_selector)

        print(
            f"Waiting for potential overlay ('{overlay_selector}') to disappear (second run)..."
        )
        try:
            overlay.wait_for(state="hidden", timeout=10000)
            print("Overlay is hidden or was not an issue (second run).")
        except Exception:
            print(
                f"Warning: Overlay ('{overlay_selector}') did not disappear within 10s (second run). Attempting to dismiss with Escape key."
            )
            page.keyboard.press("Escape")
            print("Pressed Escape key as a fallback to dismiss overlay (second run).")
            page.wait_for_timeout(500)

            if overlay.is_visible():
                print(
                    f"Warning: Overlay ('{overlay_selector}') still visible after Escape press (second run). Click might fail."
                )
            else:
                print(
                    "Overlay seems to have been dismissed by Escape key or disappeared (second run)."
                )

        print("Attempting to click the Run button (second run)...")
        try:
            run_bttn.click(timeout=15000)
            print("Run button clicked successfully (second run).")
        except Exception as e:
            print(f"Error: Failed to click Run button (second run). {e}")
            page.screenshot(path="debug_run_button_click_failed_second_run.png")
            print("Screenshot saved to debug_run_button_click_failed_second_run.png.")
            try:
                with open(
                    "debug_page_content_click_failed_second_run.html",
                    "w",
                    encoding="utf-8",
                ) as f:
                    f.write(page.content())
                print(
                    "Page HTML saved to debug_page_content_click_failed_second_run.html."
                )
            except Exception as ex_html:
                print(f"Could not save page HTML: {ex_html}")
            raise

        page.wait_for_timeout(60000)  # Wait after second run
        ai_response = page.locator("ms-text-chunk.ng-star-inserted").last
        ai_response.wait_for(state="visible", timeout=30000)
        print("AI response is now visible (second run).")
        ai_response_text = ai_response.inner_text()
        print("AI Response Text (second run):")
        print(ai_response_text)

    except Exception as e:
        print(f"Error: Interaction for the second prompt failed. Details: {e}")
        page.screenshot(path="debug_second_prompt_interaction_failed.png")
        print("Screenshot saved to debug_second_prompt_interaction_failed.png")
        try:
            with open(
                "debug_page_content_second_prompt_failed.html", "w", encoding="utf-8"
            ) as f:
                f.write(page.content())
            print("Page HTML saved to debug_page_content_second_prompt_failed.html.")
        except Exception as ex_html:
            print(f"Could not save page HTML for second prompt failure: {ex_html}")
        raise

    page.pause()
    print("Waiting for 10 seconds to observe UI after clicking Run...")
    page.wait_for_timeout(10000)

    print("Script finished.")
    page.wait_for_timeout(10000)

    print("Script finished.")
